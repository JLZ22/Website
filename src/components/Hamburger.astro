---
import NavMenu from "./NavMenu.astro";
import Icon from "astro-iconify";

interface Props {
  section: string;
  side: string;
}

const { section, side } = Astro.props;
if (side !== "left" && side !== "right") {
  throw new Error("Invalid side value. It must be either 'left' or 'right'.");
}
const isLeft = side === "left";
---

<div
  id="screen"
  class={`absolute h-screen w-screen flex ${isLeft ? "justify-start" : "justify-end"}`}
>
  <span id={side}></span>

  <div
    id="side-menu"
    class={`h-screen w-36  flex-col ${isLeft ? "justify-end" : "justify-start"} z-30 bg-zinc-950 opacity-85 transition-transform duration-1000 ease-in-out`}
    hidden
  >
    <!-- Close Button -->
    <div
      id="close"
      class={` w-full flex ${isLeft ? "justify-end" : "justify-start"}`}
    >
      <button
        id="close-button"
        class="ml-2 mr-2 mt-7 flex w-fit items-center justify-center hover:scale-125"
      >
        <Icon name="material-symbols-light:tab-close" width="40" />
      </button>
    </div>

    <!-- Menu -->
    <div class="ml-5 mt-16">
      <NavMenu section={section} />
    </div>

    <div class={`mt-20 flex ${isLeft ? "justify-end" : "justify-start"}`}>
      <button id="left-right-button" class="ml-2 mr-2 mt-auto">
        <Icon
          name={`${isLeft ? "material-symbols:arrow-right-alt" : "material-symbols:arrow-left-alt"}`}
          width="40"
        />
      </button>
    </div>
  </div>

  <!-- Hamburger -->
  <div class={`absolute mt-8 z-40 ${isLeft ? "ml-5" : "mr-5"} hover:scale-125`}>
    <button id="hamburger" aria-expanded="false" aria-controls="menu">
      <span class="mb-1 block h-1 w-6 bg-indigo-200"></span>
      <span class="mb-1 block h-1 w-6 bg-indigo-200"></span>
      <span class="block h-1 w-6 bg-indigo-200"></span>
    </button>
  </div>
</div>

<script>
  let open = false;
  let left = false;

  function toggleOpen() {
    open = !open;
    document.getElementById("close-button");
  }

  function isLeft() {
    let span = document.getElementById("left");
    return span !== null;
  }

  function getTransitionClass() {
    return isLeft() ? "-translate-x-full" : "translate-x-full";
  }

  function getSideMenu() {
    return document.getElementById("side-menu");
  }

  function toggleBurger() {
    document.getElementById("hamburger")?.toggleAttribute("hidden");
  }

  function hide() {
    let sideMenu = getSideMenu();

    // sideMenu?.classList.remove("translate-x-0");
    // sideMenu?.classList.add(getTransitionClass());
    sideMenu?.toggleAttribute("hidden");

    toggleOpen();
    toggleBurger();
  }

  function show() {
    let sideMenu = getSideMenu();

    // sideMenu?.classList.remove(getTransitionClass());
    // sideMenu?.classList.add("translate-x-0");
    sideMenu?.toggleAttribute("hidden");

    toggleOpen();
    toggleBurger();
  }

  document.addEventListener("astro:page-load", () => {
    // show menu if hamburger is clicked
    document.getElementById("hamburger")?.addEventListener("click", (event) => {
      event.stopPropagation();

      show();
    });

    document.getElementById("close-button")?.addEventListener("click", () => {
      hide();
    });

    // close the menu if it is open and anywhere is clicked
    document.addEventListener("click", (event) => {
      // menu open and click not on the menu
      if (
        open &&
        !document.getElementById("side-menu")?.contains(event?.target as Node)
      ) {
        hide();
      }
    });
  });
</script>
