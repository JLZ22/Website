---
import NavMenu from "./NavMenu.astro";
import Icon from "astro-iconify";

interface Props {
  section: string;
}

const { section } = Astro.props;
---

<div
  id="screen"
  class={`absolute h-screen w-screen flex justify-start`}
>
  <div
    id="side-menu"
    class={`h-screen w-36 flex-col justify-end z-30 bg-zinc-950 opacity-85 transition-transform duration-1000 ease-in-out`}
    hidden
  >
    <!-- Close Button -->
    <div
      id="close"
      class={` w-full flex justify-end`}
    >
      <button
        id="close-button"
        class="ml-2 mr-2 mt-7 flex w-fit items-center justify-center hover:scale-125 hover:text-red-400"
      >
        <Icon name="material-symbols-light:tab-close" width="40" />
      </button>
    </div>

    <!-- Menu -->
    <div class="ml-5 mt-16">
      <NavMenu section={section} />
    </div>

    <div id="left-right" class={`mt-20 flex justify-end`}>
      <button id="left-right-button" class="p-2 mt-auto ">
        <Icon
          id="arrow-icon"
          name={`material-symbols:arrow-right-alt`}
          width="40"
        />
      </button>
    </div>
  </div>

  <!-- Hamburger -->
  <div class={`absolute mt-10 z-40 ml-5 mr-5`}>
    <button id="hamburger" class="hover:scale-125 hover:bg-blue-500 p-2">
      <span class="mb-1 block h-1 w-6 bg-indigo-200"></span>
      <span class="mb-1 block h-1 w-6 bg-indigo-200"></span>
      <span class="block h-1 w-6 bg-indigo-200"></span>
    </button>
  </div>
</div>

<script>
  let open = false;
  let left = true;

  function toggleSides() {
    function replaceClass(elem: HTMLElement | null, curr: string, incoming: string) {
      elem?.classList.remove(curr)
      elem?.classList.add(incoming)
    }
    left = !left;
    let js = "justify-start"
    let je = "justify-end"

    if (!left) {
      replaceClass(document.getElementById("screen"), js, je);
      replaceClass(document.getElementById("side-menu"), je, js);
      replaceClass(document.getElementById("close"), je, js);
      replaceClass(document.getElementById("left-right"), je, js);
      document.getElementById("left-right-button")?.classList.add("rotate-180")
    } else {
      replaceClass(document.getElementById("screen"), je, js);
      replaceClass(document.getElementById("side-menu"), js, je);
      replaceClass(document.getElementById("close"), js, je);
      replaceClass(document.getElementById("left-right"), js, je);
      document.getElementById("left-right-button")?.classList.remove("rotate-180")
    }
  }

  function toggleOpen() {
    open = !open;
    document.getElementById("close-button");
  }

  function getSideMenu() {
    return document.getElementById("side-menu");
  }

  function toggleBurger() {
    document.getElementById("hamburger")?.toggleAttribute("hidden");
  }

  function hide() {
    let sideMenu = getSideMenu();

    sideMenu?.toggleAttribute("hidden");

    toggleOpen();
    toggleBurger();
  }

  function show() {
    let sideMenu = getSideMenu();

    sideMenu?.toggleAttribute("hidden");

    toggleOpen();
    toggleBurger();
  }

  document.addEventListener("astro:page-load", () => {
    // show menu if hamburger is clicked
    document.getElementById("hamburger")?.addEventListener("click", (event) => {
      event.stopPropagation();
      show();
    });

    document.getElementById("close-button")?.addEventListener("click", () => {
      hide();
    });

    // close the menu if it is open and anywhere is clicked
    document.addEventListener("click", (event) => {
      // menu open and click not on the menu
      if (
        open &&
        !document.getElementById("side-menu")?.contains(event?.target as Node)
      ) {
        hide();
      }
    });

    document.getElementById("left-right-button")?.addEventListener("click", () => {
      toggleSides();
    });
  });
</script>
